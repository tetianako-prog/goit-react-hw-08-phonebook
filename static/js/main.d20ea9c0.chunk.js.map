{"version":3,"sources":["components/Navigation/Navigation.js","components/Navigation/AuthNav.js","components/Navigation/UserMenu.js","components/Navigation/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","redux/phonebook/phonebook-reducer.js","redux/auth/auth-reducer.js","redux/store.js","index.js","redux/phonebook/phonebook-actions.js","redux/auth/auth-selectors.js","redux/auth/auth-operations.js","redux/auth/auth-actions.js"],"names":["connect","state","isAuthenticated","authSelectors","getIsAuthenticated","Nav","to","exact","className","AuthNav","mapDispatchToProps","onLogout","authOperations","logOut","email","getUserEmail","style","color","marginRight","Button","type","variant","onClick","Navbar","bg","Container","fluid","PrivateRoute","Component","component","redirectTo","routeProps","useSelector","render","props","PublicRoute","restricted","HomePage","lazy","ContactsPage","RegisterPage","LoginPage","App","this","onGetCurretnUser","fallback","path","textAlign","getCurrentUser","contactsReducer","createReducer","actions","fetchContactSuccess","_","payload","addContactSuccess","deleteContactSuccess","filter","contact","id","loadingReducer","fetchContactRequest","fetchContactError","addContactRequest","addContactError","deleteContactRequest","deleteContactError","filterReducer","filterContacts","errorReducer","combineReducers","items","loading","error","initialUserState","name","user","authActions","registerSuccess","loginSuccess","logoutSuccess","getCurrentUserSuccess","token","setError","registerError","loginError","logoutError","getCurrentUserError","isLoggedIn","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","contacts","mainStore","persistor","persistStore","ReactDOM","StrictMode","document","getElementById","createAction","selectors","getUsername","axios","defaults","baseURL","headers","common","Authorization","operations","register","credentials","dispatch","a","registerRequest","post","response","data","message","logIn","loginRequest","console","log","logoutRequest","getState","persistedToken","getCurrentUserRequest","get"],"mappings":"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","file":"static/js/main.d20ea9c0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { connect } from 'react-redux';\r\nimport authSelectors from '../../redux/auth/auth-selectors';\r\n\r\nfunction Navigation({ isAuthenticated }) {\r\n  return (\r\n    <Nav>\r\n      <NavLink to=\"/\" exact className=\"nav-link\">\r\n        Home\r\n      </NavLink>\r\n\r\n      {isAuthenticated && (\r\n        <NavLink to=\"/contacts\" exact className=\"nav-link\">\r\n          Contacts\r\n        </NavLink>\r\n      )}\r\n    </Nav>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Navigation);\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nconst AuthNav = () => (\r\n  <Nav>\r\n    <NavLink to=\"/register\" exact className=\"nav-link\">\r\n      Register\r\n    </NavLink>\r\n    <NavLink to=\"/login\" exact className=\"nav-link\">\r\n      Login\r\n    </NavLink>\r\n  </Nav>\r\n);\r\n\r\nexport default AuthNav;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport authSelectors from '../../redux/auth/auth-selectors';\r\nimport authOperations from '../../redux/auth/auth-operations';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst UserMenu = ({ email, onLogout }) => (\r\n  <div>\r\n    <span style={{ color: 'rgb(255,255,255)', marginRight: '10px' }}>\r\n      {email}\r\n    </span>\r\n    <Button type=\"button\" variant=\"light\" onClick={onLogout}>\r\n      Logout\r\n    </Button>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  email: authSelectors.getUserEmail(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogout: authOperations.logOut,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\r\n","import React from 'react';\r\nimport Navigation from './Navigation';\r\nimport AuthNav from './AuthNav';\r\nimport { connect } from 'react-redux';\r\nimport authSelectors from '../../redux/auth/auth-selectors';\r\nimport UserMenu from './UserMenu';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nconst AppBar = ({ isAuthenticated }) => (\r\n  <Navbar bg=\"primary\" variant=\"dark\">\r\n    <Container fluid=\"xl\">\r\n      <Navigation />\r\n      {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n    </Container>\r\n  </Navbar>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(AppBar);\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nconst PrivateRoute = ({ component: Component, redirectTo, ...routeProps }) => {\r\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated);\r\n  return (\r\n    <Route\r\n      {...routeProps}\r\n      render={props =>\r\n        isAuthenticated ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to={redirectTo} />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nconst PublicRoute = ({ component: Component, redirectTo, ...routeProps }) => {\r\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated);\r\n  return (\r\n    <Route\r\n      {...routeProps}\r\n      render={props =>\r\n        isAuthenticated && routeProps.restricted ? (\r\n          <Redirect to={redirectTo} />\r\n        ) : (\r\n          <Component {...props} />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PublicRoute;\r\n","import React, { Component, Suspense, lazy } from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Route } from 'react-router-dom';\nimport AppBar from './components/Navigation';\nimport authOperations from './redux/auth/auth-operations';\nimport PrivateRoute from './components/PrivateRoute';\nimport PublicRoute from './components/PublicRoute';\n\nconst HomePage = lazy(() => import('./views/HomePage'));\nconst ContactsPage = lazy(() => import('./views/ContactsPage'));\nconst RegisterPage = lazy(() => import('./views/RegisterPage'));\nconst LoginPage = lazy(() => import('./views/LoginPage'));\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onGetCurretnUser();\n  }\n\n  render() {\n    return (\n      <div>\n        <AppBar />\n        <Suspense fallback={<p>Загружаем...</p>}>\n          <Switch>\n            <PublicRoute exact path=\"/\" component={HomePage} />\n            <PrivateRoute\n              path=\"/contacts\"\n              redirectTo=\"/login\"\n              component={ContactsPage}\n            />\n            <PublicRoute\n              path=\"/login\"\n              restricted\n              redirectTo=\"/contacts\"\n              component={LoginPage}\n            />\n            <PublicRoute\n              path=\"/register\"\n              restricted\n              redirectTo=\"/contacts\"\n              component={RegisterPage}\n            />\n            <Route\n              render={() => (\n                <div style={{ textAlign: 'center' }}>Page not found :(</div>\n              )}\n            />\n          </Switch>\n        </Suspense>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onGetCurretnUser: authOperations.getCurrentUser,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\r\nimport actions from './phonebook-actions';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst contactsReducer = createReducer([], {\r\n  [actions.fetchContactSuccess]: (_, { payload }) => payload,\r\n  [actions.addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst loadingReducer = createReducer(false, {\r\n  [actions.fetchContactRequest]: () => true,\r\n  [actions.fetchContactSuccess]: () => false,\r\n  [actions.fetchContactError]: () => false,\r\n  [actions.addContactRequest]: () => true,\r\n  [actions.addContactSuccess]: () => false,\r\n  [actions.addContactError]: () => false,\r\n  [actions.deleteContactRequest]: () => true,\r\n  [actions.deleteContactSuccess]: () => false,\r\n  [actions.deleteContactError]: () => false,\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [actions.filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\nconst errorReducer = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n  items: contactsReducer,\r\n  filter: filterReducer,\r\n  loading: loadingReducer,\r\n  error: errorReducer,\r\n});\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: setError,\r\n  [authActions.loginError]: setError,\r\n  [authActions.logoutError]: setError,\r\n  [authActions.getCurrentUserError]: setError,\r\n});\r\n\r\nconst isLoggedIn = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n});\r\nexport default combineReducers({\r\n  user,\r\n  token,\r\n  error,\r\n  isLoggedIn,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport contactsReducer from './phonebook/phonebook-reducer';\r\nimport authReducer from './auth/auth-reducer';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n    contacts: contactsReducer,\r\n  },\r\n  //devTools: process.env.NODE_ENV === 'development',\r\n  middleware,\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst mainStore = { store, persistor };\r\nexport default mainStore;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nconst fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nconst fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nconst addContactRequest = createAction('contacts/addContactRequest');\r\nconst addContactSuccess = createAction('contacts/addContactSuccess');\r\nconst addContactError = createAction('contacts/addContactError');\r\n\r\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nconst deleteContactError = createAction('contacts/deleteError');\r\n\r\nconst filterContacts = createAction('contacts/filter');\r\n\r\nconst actions = {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  filterContacts,\r\n};\r\n\r\nexport default actions;\r\n","const getIsAuthenticated = state => state.auth.isLoggedIn;\r\n\r\nconst getUsername = state => state.auth.user.name;\r\n\r\nconst getUserEmail = state => state.auth.user.email;\r\n\r\nconst selectors = {\r\n  getIsAuthenticated,\r\n  getUsername,\r\n  getUserEmail,\r\n};\r\n\r\nexport default selectors;\r\n","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst register = credentials => async dispatch => {\r\n  dispatch(authActions.registerRequest());\r\n  try {\r\n    const response = await axios.post('/users/signup', credentials);\r\n    token.set(response.data.token);\r\n    dispatch(authActions.registerSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.registerError(error.message));\r\n  }\r\n};\r\n\r\nconst logIn = credentials => async dispatch => {\r\n  dispatch(authActions.loginRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/login', credentials);\r\n\r\n    token.set(response.data.token);\r\n    console.log(response);\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\nconst logOut = () => async dispatch => {\r\n  dispatch(authActions.logoutRequest());\r\n\r\n  try {\r\n    await axios.post('/users/logout');\r\n\r\n    token.unset();\r\n    dispatch(authActions.logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(authActions.logoutError(error.message));\r\n  }\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\nconst operations = { register, logIn, logOut, getCurrentUser };\r\n\r\nexport default operations;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nconst actions = {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n\r\nexport default actions;\r\n"],"sourceRoot":""}